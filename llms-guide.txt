# Inspect Scout


## Welcome

Welcome to Inspect Scout, a tool for in-depth analysis of [Inspect
AI](https://inspect.aisi.org.uk/) transcripts. Scout has the following
core features:

1.  Scan full sample transcripts or individual messages or events.
2.  High performance parallel processing of transcript content.
3.  Resume scans that are stopped due to errors or interruptions.
4.  Tightly integrated with Inspect [data
    frames](https://inspect.aisi.org.uk/dataframe.html) for input and
    analysis.

### Installation

Install the `inspect_scout` package from GitHub as follows:

``` bash
pip install git+https://github.com/meridianlabs-ai/inspect_scout
```

Inspect Scout also depends on the development version of Inspect AI,
which will be installed automatically when you install Scout.

## Scout Basics

Below we’ll provide some simple examples of creating and using Scout
scanners. Some core components we’ll make use of here include:

- `Transcript` — LLM conversation to analyze (e.g. an Inspect sample
  trajectory).

- `Scanner` — Function that takes an input from a `Transcript` and
  returns a `Result` (conceptually very similar to an Inspect `Scorer`).

- `Results` — Data frame(s) that includes the results of scanners
  applied to transcripts.

### Creating a Scanner

The following illustrates the implementation of a simple LLM scanner
(click on the numbers at right for further explanation):

**scanner.py**

``` python
from inspect_scout import (
    Result, Scanner, Transcript, scanner, messages_as_str
)

from inspect_ai.model import get_model

@scanner(messages="all")
def ctf_environment() -> Scanner[Transcript]:
    
    async def scan(transcript: Transcript) -> Result:

        # call model
        output = await get_model().generate(
            "Here is a transcript of an LLM agent " +
            "solving a cybersecurity challenge:\n\n" +
            "===================================" +
            messages_as_str(transcript.messages) +
            "===================================\n\n" +
            "In the transcript above do you detect any " +
            "instances of environment misconfiguration " +
            "preventing the agent from completing it's " + 
            "task? If no, simply respond with 'No'. " +
            "If yes, respond with 'Yes' followed by an " +
            "explanation."
        )

        # extract the first word
        match = re.match(r"^\w+", output.completion.strip())

        # return result
        if match:
            answer = match.group(0)
            return Result(
                value=answer.lower() == "yes",
                answer=answer,
                explanation=output.completion,
            )
        else:
            return Result(value=False, explanation=output.completion)

    return scan
```

Line 7  
Scanners are decorated with `@scanner` so they can specify the exact
subset of content they need to read. In this case only messages (and not
events) will be read from the log, decreasing load time.

Line 13  
Scanners frequently use models to perform scanning. Calling
`get_model()` utilizes the default model for the scan job (which can be
specified in the top level call to scan).

Lines 16-18  
Convert the message history into a string for presentation to the model.

Lines 33-37  
As with scorers, results also include additional context (here the
extracted answer and full model completion).

Above we used only the `messages` field from the `transcript`, but
`Transcript` includes many other fields with additional context. See
[Transcript Fields](transcripts.qmd#transcript-fields) for additional
details.

### Running a Scan

We can now run that scanner on our log files. The `Scanner` will be
called once for each sample trajectory in the log (total samples \*
epochs):

``` bash
scout scan scanner.py -T ./logs -model openai/gpt-5
```

You can also address individual scanners using `@<scanner-name>`. For
example:

``` bash
scout scan scanner.py@ctf_environment -T ./logs -model openai/gpt-5
```

Note that if no `-T` argument is provided then Scout will use the
current `INSPECT_LOG_DIR` (by default “./logs”) so the `-T` above is not
strictly necessary.

### Adding a Scanner

Let’s add another scanner that looks for uses of Java in tool calls:

``` python
@scanner(events=["tool"]) 
def java_tool_usages() -> Scanner[ToolEvent]:
    
    async def scan(event: ToolEvent) -> Result:
        if "java" in str(event.arguments).lower():
            return Result(
                value=True, 
                explanation=str(event.arguments)
            )
        else:
            return Result(value=False)
       
    return scan
```

Note that we specify `events=["tool"]` to constrain reading to only tool
events, and that our function takes an individual event rather than a
`Transcript`.

If you add this scanner to the same source file as the
`ctf_environment()` scanner then `scout scan` will run both of the
scanners using the same `scout scan scanner.py` command,

See the [Scanners](scanners.qmd) article for more details on creating
scanners, including how to write scanners that accept a variety of
inputs and how to use scanners directly as Inspect scorers.

### Scan Jobs

You may want to import scanners from other modules and compose them into
a `ScanJob`. To do this, add a `@scanjob` decorated function to your
source file (it will be used in preference to `@scanner` decorated
functions).

A `ScanJob` can also include `transcripts` or any other option that you
can pass to `scout scan` (e.g. `model`). For example:

**scanner.py**

``` python
from inspect_scout import ScanJob, scanjob

@scanjob
def job() -> ScanJob:
    return ScanJob(
        scanners=[ctf_environment(), java_tool_usages()],
        transcripts="./logs",
        model="openai/gpt-5"
    )
```

You can then use the same command to run the job (`scout scan` will
prefer a @scanjob defined in a file to individual scanners):

``` bash
scout scan scanner.py
```

You can also specify a scan job using YAML or JSON. For example, the
following is equivalent to the example above:

**scan.yaml**

``` yaml
scanners:
  - name: deception
    file: scanner.py
  - name: java_tool_usages
    file: scanner.py

transcripts: logs

model: openai/gpt-5
```

Which can be executed with:

``` bash
scout scan scan.yaml
```

### Scan Results

By default, the results of scans are written into the `./scans`
directory. You can override this using the `--results` option—both file
paths and S3 buckets are supported.

Each scan is stored in its own directory and has both metadata about the
scan (configuration, errors, summary of results) as well as parquet
files that contain the results. You can read the results either as a
dict of Pandas data frames or as a DuckDB database (there will be a
table for each scanner).

``` python
# results as pandas data frames
results = scan_results("scans/scan_id=iGEYSF6N7J3AoxzQmGgrZs")
deception_df = results.scanners["deception"]
tool_errors_df = results.scanners["tool_errors"]

# results as duckdb database 
results = scan_results_db("scans/scan_id=iGEYSF6N7J3AoxzQmGgrZs")
with results:
    # run queries to read data frames
    df = results.conn.execute("SELECT ...").fetch_df()

    # export entire database as file
    results.to_file("results.duckdb")
```

See the [Results](results.qmd) article for more details on the columns
available in the data frames returned by `scan_results()`.

### Handling Errors

If a scan job is interrupted either due to cancellation (Ctrl+C) or a
runtime error, you can resume the scan from where it left off using the
`scan resume` command. For example:

``` bash
scout scan resume "scans/scan_id=iGEYSF6N7J3AoxzQmGgrZs"
```

If errors occur during an individual scan, they are caught and reported.
You can then either retry the failed scans with `scan resume` or
complete the scan (ignoring errors) with `scan complete`:

![](images/scan-resume.png)

## Transcripts

In the example(s) above we scanned the samples from a single Inspect log
file. More commonly though you’ll target an entire log directory or a
subset of logs in that directory. For example, here we scan all of
Cybench logs in the `./logs` directory:

``` python
from inspect_scout (
    import scan, transcripts_from_logs, log_metadata as m
)

from .scanners import deception, tool_errors

transcripts = transcripts_from_logs("./logs")
transcripts = transcripts.where(m.task_name == "cybench")

status = scan(
    scanners = [ctf_environment(), tool_errors()],
    transcripts = transcripts
)
```

The `log_metadata` object (aliased to `m`) provides a typed way to
specified `where()` clauses for filtering transcripts.

Note that doing this query required us to switch to the Python `scan()`
API. We can still use the CLI if we wrap our transcript query in a
`ScanJob`:

**cybench_scan.py**

``` python
from inspect_scout (
    import ScanJob, scanjob, transcripts_from_logs, log_metadata as m
)

from .scanners import deception, tool_errors

@scanjob
def cybench_job(logs: str = "./logs") -> ScanJob:

    transcripts = transcripts_from_logs(logs)
    transcripts = transcripts.where(m.task_name == "cybench")

    return ScanJob(
        scanners = [deception(), java_tool_usages()],
        transcripts = transcripts
    )
```

Then from the CLI:

``` bash
scout scan cybench.py -S logs=./logs --model openai/gpt-5
```

The `-S` argument enables you to pass arguments to the `@scanjob`
function (in this case determining what directory to read logs from).

See the article on [Transcripts](transcripts.qmd) to learn more about
the various ways to read and filter transcripts.

## Parallelism

The Scout scanning pipeline is optimized for parallel reading and
scanning as well as minimal memory consumption. There are a few options
you can use to tune parallelism:

| Option | Description |
|----|----|
| `--max-transcripts` | The maximum number of transcripts to scan in parallel (defaults to 25). You can set this higher if your model API endpoint can handle larger numbers of concurrent requests. |
| `--max-connections` | The maximum number of concurrent requests to the model provider (defaults to `--max-transcripts`). |
| `--max-processes` | The maximum number of processes to use for parsing and scanning (defaults to the number of CPUs on the system). |

## Learning More

See the following articles to learn more about using Scout:

- [Transcripts](transcripts.qmd): Reading and filtering transcripts for
  scanning.

- [Scanners](scanners.qmd): Implementing custom scanners and loaders.

- [Results](results.qmd): Collecting and analyzing scanner results.

- [Reference](reference/index.qmd): Detailed documentation on the Scout
  Python API and CLI commands.

# Transcripts


## Overview

Transcripts are the fundamental input to scanners, and are read from one
or more Inspect logs. The `Transcripts` class represents a collection of
transcripts that has been selected for scanning. This is an index of
`TranscriptInfo` rather than full transcript content, and supports
various filtering operations to refine the collection.

## Reading Transcripts

Use the `transcripts_from_logs()` function to read a collection of
`Transcripts` from one or more Inspect logs:

``` python
from inspect_scout import transcripts_from_logs

# read from a log directory
transcripts = transcripts_from_logs("./logs")

# read from an S3 log directory
transcripts = transcripts_from_logs("s3://my-inspect-logs")

# read multiple log directories
transcripts = transcripts_from_logs(["./logs", "./logs2"])

# read from one or more log files
transcripts = transcripts_from_logs(
    ["logs/cybench.eval", "logs/swebench.eval"]
)
```

## Filtering Transcripts

If you want to scan only a subset of transcripts, you can use the
`.where()` method to narrow down the collection. For example:

``` python
from inspect_scout import transcripts_from_logs, log_metadata as m

transcripts = (
    transcripts_from_logs("./logs")
    .where(m.task_name == "cybench")
    .where(m.model.like("openai/%"))
)
```

See the `Column` documentation for additional details on supported
filtering operations.

See the `LogMetadata` documentation for the standard metadata fields
that are exposed from logs for filtering.

You can also limit the total number of transcripts as well as shuffle
the order of transcripts read (both are useful during scanner
development when you don’t want to process all transcripts). For
example:

``` python
from inspect_scout import transcripts_from_logs, log_metadata as m

transcripts = (
    transcripts_from_logs("./logs")
    .limit(10)
    .shuffle(42)
)
```

## Transcript Fields

The `Transcript` type is defined somewhat generally to accommodate other
non-Inspect transcript sources in the future. Here are the available
`Transcript` fields and how these map back onto Inspect logs:

| Field | Type | Description |
|----|----|----|
| `id` | str | Globally unique identifier for a transcript (maps to `EvalSample.uuid` in the Inspect log). |
| `source_id` | str | Globally unique identifier for a transcript source (maps to `eval_id` in the Inspect log) |
| `source_uri` | str | URI for source data (e.g. full path to the Inspect log file). |
| `score` | JsonValue | Main score assigned to transcript (optional). |
| `scores` | dict\[str, JsonValue\] | All scores assigned to transcript (optional). |
| `variables` | dict\[str, JsonValue\] | Variables (e.g. to be used in a prompt template) associated with transcript. For Inspect logs this is `Sample.metadata`. |
| `metadata` | dict\[str, JsonValue\] | Transcript source specific metadata (e.g. model, task name, errors, epoch, dataset sample id, limits, etc.). See `LogMetadata` for details on metadata available for Inspect logs. |
| `messages` | list\[ChatMessage\] | Message history from `EvalSample` |
| `events` | list\[Event\] | Event history from `EvalSample` |

The `metadata` field includes fields read from eval sample metadata. For
example:

``` python
transcript.metadata["sample_id"]        # sample uuid 
transcript.metadata["id"]               # dataset sample id 
transcript.metadata["epoch"]            # sample epoch
transcript.metadata["eval_metadata"]    # eval metadata
transcript.metadata["sample_metadata"]  # sample metadata
transcript.metadata["score"]            # main sample score 
transcript.metadata["score_<scorer>"]   # named sample scores
```

See the `LogMetadata` class for details on all of the fields included in
`transcript.metadata` for Inspect logs.

## Scanning Transcripts

Once you have established your list of transcripts to scan, just pass
them to the `scan()` function:

``` python
from inspect_scout import scan, transcripts_from_logs

from .scanners import ctf_environment, java_tool_calls

scan(
    scanners = [ctf_environment(), java_tool_calls()],
    transcripts = transcripts_from_logs("./logs")
)
```

If you want to do transcript filtering and then invoke your scan from
the CLI using `scout scan`, then perform the filtering inside a
`@scanjob`. For example:

# Scanners


## Overview

Scanners are the main unit of processing in Inspect Scout and can target
a wide variety of content types. In this article we’ll cover the basic
scanning concepts, and then drill into creating scanners that target
various types (`Transcript`, `Event`, or `ChatMessage`) as well as
creating custom loaders which enable scanning of lists of events or
messages.

You can also use scanners directly as Inspect scorers (see [Scanners as
Scorers](#scanners-as-scorers) for details).

## Scanner Basics

A `Scanner` is a function that takes a `ScannerInput` (typically a
`Transcript`, but possibly an `Event`, `ChatMessage`, or list of events
or messages) and returns a `Result`. The result includes a `value` which
can be of any type—this might be `True` to indicate that something was
found but might equally be a number to indicate a count. More elaborate
scanner values (`dict` or `list`) are also possible.

Here is a simple scanner that uses a model to look for agent
“confusion”—whether or not it finds confusion, it still returns the
model completion as an `explanation`:

``` python
@scanner(messages="all")
def confusion() -> Scanner[Transcript]:
    
    async def scan(transcript: Transcript) -> Result:

        # call model
        output = await get_model().generate(
            "Here is a transcript of an LLM agent " +
            "solving a puzzle:\n\n" +
            "===================================" +
            messages_as_str(transcript.messages) +
            "===================================\n\n" +
            "In the transcript above do you see the agent " +
            "becoming confused? Repond beginning with 'Yes' " +
            "or 'No', followed by an explanation."
        )

        # extract the first word
        match = re.match(r"^\w+", output.completion.strip())

        # return result
        if match:
            answer = match.group(0)
            return Result(
                value=answer.lower() == "yes",
                answer=answer,
                explanation=output.completion,
            )
        else:
            return Result(value=False, explanation=output.completion)

    return scan
```

If a scanner doesn’t find anything, it still returns a `Result` with
`value=None` so that the explanation is preserved for later review.

### Input Types

`Transcript` is the most common `ScannerInput` however several other
types are possible:

- `Event` — Single event from the transcript (e.g. `ModelEvent`,
  `ToolEvent`, etc.). More than one `Event` in a `Transcript` can be
  scanned.

- `ChatMessage` — Single chat message from the transcript message
  history. More than one `ChatMessage` in a `Transcript` can be scanned.

- `list[Event]` or `list[ChatMessage]` — Arbitrary sets of events or
  messages extracted from the `Transcript` (see [Loaders](#loaders)
  below for details).

See the sections on [Transcripts](#transcripts), [Events](#events),
[Messages](#messages), and [Loaders](#loaders) below for additional
details on handling various input types.

### Input Filtering

One important principle of the Inspect Scout transcript pipeline is that
only the precise data to be scanned should be read, and nothing more.
This can dramatically improve performance as messages and events that
won’t be seen by scanners are never deserialized. Scanner input filters
are specified as arguments to the `@scanner` decorator (you may have
noticed the `messages="all"` attached to the scanner decorator in the
example above).

For example, here we are looking for instances of assistants
swearing—for this task we only need to look at assistant messages so we
specify `messages=["assistant"]`

``` python
@scanner(messages=["assistant"])
def assistant_swearing() -> Scanner[Transcript]:

    async def scan(transcript: Transcript) -> Result:
        swear_words = [
            word 
            for m in transcript.messages 
            for word in extract_swear_words(m.text)
        ]
        return Result(
            value=len(swear_words),
            explanation=",".join(swear_words)
        )

    return scan
```

With this filter, only assistant messages and no events whatsoever will
be loaded from transcripts during scanning.

Note that by default, no filters are active, so if you don’t specify
values for `messages` and/or `events` your scanner will not be called!

## Transcripts

Transcripts are the most common input to scanners, and are read from one
or more Inspect logs. A `Transcript` represents a single epoch from an
Inspect sample—so each Inspect log file will have `samples * epochs`
transcripts.

### Transcript Fields

The `Transcript` type is defined somewhat generally to accommodate other
non-Inspect transcript sources in the future. Here are the available
`Transcript` fields and how these map back onto Inspect logs:

| Field | Type | Description |
|----|----|----|
| `id` | str | Globally unique identifier for a transcript (maps to `EvalSample.uuid` in the Inspect log). |
| `source_id` | str | Globally unique identifier for a transcript source (maps to `eval_id` in the Inspect log) |
| `source_uri` | str | URI for source data (e.g. full path to the Inspect log file). |
| `score` | JsonValue | Main score assigned to transcript (optional). |
| `scores` | dict\[str, JsonValue\] | All scores assigned to transcript (optional). |
| `variables` | dict\[str, JsonValue\] | Variables (e.g. to be used in a prompt template) associated with transcript. For Inspect logs this is `Sample.metadata`. |
| `metadata` | dict\[str, JsonValue\] | Transcript source specific metadata (e.g. model, task name, errors, epoch, dataset sample id, limits, etc.). See `LogMetadata` for details on metadata available for Inspect logs. |
| `messages` | list\[ChatMessage\] | Message history from `EvalSample` |
| `events` | list\[Event\] | Event history from `EvalSample` |

The `metadata` field includes fields read from eval sample metadata. For
example:

``` python
transcript.metadata["sample_id"]        # sample uuid 
transcript.metadata["id"]               # dataset sample id 
transcript.metadata["epoch"]            # sample epoch
transcript.metadata["eval_metadata"]    # eval metadata
transcript.metadata["sample_metadata"]  # sample metadata
transcript.metadata["score"]            # main sample score 
transcript.metadata["score_<scorer>"]   # named sample scores
```

See the `LogMetadata` class for details on all of the fields included in
`transcript.metadata` for Inspect logs.

### Content Filtering

Note that the `messages` and `events` fields will not be populated
unless you specify a `messages` or `events` filter on your scanner. For
example, this scanner will see all messages and events:

``` python
@scanner(messages="all", events="all")
def my_scanner() -> Scanner[Transcript]: ...
```

This scanner will see only model and tool events:

``` python
@scanner(events=["model", "tool"])
def my_scanner() -> Scanner[Transcript]: ...
```

This scanner will see only assistant messages:

``` python
@scanner(messages=["assistant"])
def my_scanner() -> Scanner[Transcript]: ...
```

### Presenting Messages

When processing transcripts, you will often want to present an entire
message history to model for analysis. Above, we used the
`messages_as_str()` function to do this:

``` python
# call model
result = await get_model().generate(
    "Here is a transcript of an LLM agent " +
    "solving a puzzle:\n\n" +
    "===================================" +
    messages_as_str(transcript.messages) +
    "===================================\n\n" +
    "In the transcript above do you see the agent " +
    "becoming confused? Repond beginning with 'Yes' " +
    "or 'No', followed by an explanation."
)
```

## Event Scanners

To write a scanner that targets events, write a function that takes the
event type(s) you want to process. For example, this scanner will see
only model events:

``` python
@scanner
def my_scanner() -> Scanner[ModelEvent]:
    def scan(event: ModelEvent) -> Result: 
        ...

    return scan
```

Note that the `events="model"` filter was not required since we had
already declared our scanner to take only model events. If we wanted to
take both model and tool events we’d do this:

``` python
@scanner
def my_scanner() -> Scanner[ModelEvent | ToolEvent]:
    def scan(event: ModelEvent | ToolEvent) -> Result: 
        ...

    return scan
```

## Message Scanners

To write a scanner that targets messages, write a function that takes
the message type(s) you want to process. For example, this scanner will
only see tool messages:

``` python
@scanner
def my_scanner() -> Scanner[ChatMessageTool]:
    def scan(message: ChatMessageTool) -> Result: 
        ...

    return scan
```

This scanner will see only user and assistant messages:

``` python
@scanner
def my_scanner() -> Scanner[ChatMessageUser | ChatMessageAssistant]:
    def scan(message: ChatMessageUser | ChatMessageAssistant) -> Result: 
        ...

    return scan
```

## Scanners as Scorers

You have likely certainly that scanners are very simillar to Inspect
[Scorers](https://inspect.aisi.org.uk/scorers.html). This is by design,
and it is actually possible to use scanners directly as Inspect scorers.

For example, for the `confusion()` scorer we implemented above:

``` python
@scanner(messages="all")
def confusion() -> Scanner[Transcript]:
    
    async def scan(transcript: Transcript) -> Result:

        # model call eluded for brevity
        output = get_model(...)

        # extract the first word
        match = re.match(r"^\w+", output.completion.strip())

        # return result
        if match:
            answer = match.group(0)
            return Result(
                value=answer.lower() == "yes",
                answer=answer,
                explanation=output.completion,
            )
        else:
            return Result(value=False, explanation=output.completion)

    return scan
```

We can use this directly in an Inspect `Task` as follows:

``` python
from .scanners import confusion

@task
def mytask():
    return Task(
        ...,
        scorer = confusion()
    )
```

We can also use it with the `inspect score` command:

``` bash
inspect score --scorer scanners.py@confusion <logfile.eval>
```

The metrics used for the scorer will default to `accuracy()` and
`stderr()`—however, you can also explicitly specify metrics on the
`@scanner` decorator:

``` python
@scanner(messages="all", metrics=[accuracy(), bootstrap_stderr()])
def confusion() -> Scanner[Transcript]: ...
```

If you are interfacing with code that expects only `Scorer` instances,
you can also use the `as_scorer()` function from Inspect Scout to
explicitly convert your scanner to a scorer:

``` python
from inspect_ai import eval
from inspect_scout import as_scorer

from .mytasks import ctf_task
from .scanners import confusion

eval(ctf_task(scorer=as_scorer(confusion())))
```

## Custom Loaders

When you want to process multiple discrete items from a `Transcript`
this might not always fall neatly into single messages or events. For
example, you might want to process pairs of user/assistant messages. To
do this, create a custom `Loader` that yields the content as required.

For example, here is a `Loader` that yields user/assistant message
pairs:

``` python
@loader(messages=["user", "assistant"])
def conversation_turns():
    async def load(
        transcript: Transcript
    ) -> AsyncGenerator[list[ChatMessage], None]:
        
        for user,assistant in message_pairs(transcript.messages):
            yield [user, assistant]

    return load
```

Note that just like with scanners, the loader still needs to provide a
`messages=["user", "assistant"]` in order to see those messages.

We can now use this loader in a scanner that looks for refusals:

``` python
@scanner(loader=conversation_turns())
def assistant_refusals() -> Scanner[list[ChatMessage]]:

    async def scan(messages: list[ChatMessage]) -> Result:
        user, assistant = messages
        return Result(
            value=is_refusal(assistant.text), 
            explanation=messages_as_str(messages)
        )

    return scan
```

# Results


## Overview

The results of scans are stored in directory on the local filesystem (by
default `./scans`) or in a remote S3 bucket. When a scan job is
completed its directory is printed, and you can also use the
`scan_list()` function or `scout scan list` command to enumerate scan
jobs.

Scan results include the following:

- Scan configuration (e.g. options passed to `scan()` or to
  `scout scan`).

- Transcripts scanned and scanners executed and errors which occurred
  during the last scan.

- A set of [Parquet](https://parquet.apache.org/docs/) files with scan
  results (one for each scanner). There are functions available to
  interface with these files as Pandas data frames or DuckDB databases.

## Workflow

### Scout CLI

The `scout scan` command will print its status at the end of its run. If
all of the scanners completed without errors you’ll see a message
indicating the scan is complete along with a pointer to the scan
directory where results are stored:

![](images/scan-complete.png)

You can then pass that directory to the `scan_results()` function to get
access to the underlying data frames for each scanner:

``` python
from inspect_scout import scan_results

results = scan_results("scans/scan_id=3ibJe9cg7eM5zo3h5Hpbr8")
deception_df = results.scanners["deception"]
tool_errors_df = results.scanners["tool_errors"]
```

### Python API

The `scan()` function returns a `Status` object which indicates whether
the scan completed successfully (in which case the scanner results are
available for analysis). You’ll therefore want to check the `.completed`
field before proceeding to read the results. For example:

``` python
from inspect_scout import (
    scan, scan_results, transcripts_from_logs
)

from .scanners import ctf_environment, java_tool_calls

status = scan(
    transcripts=transcripts_from_logs("./logs"),
    scanners=[ctf_environment(), java_tool_calls()]
)

if status.complete:
    results = scan_results(status.location)
    deception_df = results.scanners["deception"]
    tool_errors_df = results.scanners["tool_errors"]
```

### DuckDB

The above examples demonstrated reading scanner output as Pandas data
frames. If you prefer, you can also read scanner data from a DuckDB
database as follows:

``` python
results = scan_results_db("scans/scan_id=3ibJe9cg7eM5zo3h5Hpbr8")
with results:
    # run queries to read data frames
    df = results.conn.execute("SELECT ...").fetch_df()

    # export entire database as file
    results.to_file("results.duckdb")
```

## Results Data

The `Results` object returned from `scan_results()` includes both
metadata about the scan as well as the scanner data frames:

| Field | Type | Description |
|----|----|----|
| `complete` | bool | Is the job complete? (all transcripts scanned) |
| `spec` | ScanSpec | Scan specification (transcripts, scanners, options, etc.) |
| `location` | str | Location of scan directory |
| `summary` | Summary | Summary of scan (results, errors, tokens, etc.) |
| `errors` | list\[Error\] | Errors during last scan attempt. |
| `scanners` | dict\[str, pd.DataFrame\] | Results data for each scanner (see [Data Frames](#scanner-data) for details) |

### Data Frames

<style type="text/css">
#scanner-data td:nth-child(2) {
  font-size: 0.9em;
  line-height: 1.2;
}
#scanner-data small {
  font-size: x-small;
}
</style>

The data frames available for each scanner contain information about the
source evaluation and transcript, the results found for each transcript,
as well as data on token usage, model calls, and errors which may have
occurred during the scan.

The data frame includes the following fields (note that some fields
included embedded JSON data, these are all noted below):

[TABLE]

Several of these fields can be used to link back to the source eval log
and sample for the transcript:

- `transcript_id` — This is the same as the `EvalSample.uuid` in the
  Inspect log or the `sample_id` in data frames created by
  [samples_df()](https://inspect.aisi.org.uk/reference/inspect_ai.analysis.html#samples_df).

- `transcript_source_id` — This is the same as the `eval_id` in both the
  Inspect log and Inspect data frames.

- `transcript_source_uri` — This is the full path (filesystem or S3) to
  the actual log file where the transcript was read from.

